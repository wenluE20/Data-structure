#include <stdio.h>
#include <stdlib.h>
#include <string.h>

# define max_dis 100000

typedef char vextype[20];

typedef struct {
    int N, E;//N是顶点数，E是边数
    int** matrix;//储存邻接矩阵
    vextype* vertex;//存储节点的名字
} Graph;

Graph createGraph(int n);
int isConnected(Graph g);
void nodeDegree(Graph g, int* node_degree);
double clusteringCoefficient(Graph g);
int Diameter(Graph g);
int Radius(Graph g);
int dijkstra(Graph g, int start, int end, int* path);
void printPath(int d, int* diameter_path, Graph g);


/**
 * 创建一个节点数为n的图
 * @param n 节点个数
 * @return 返回这个图
 */
Graph createGraph(int n) {
    int i, j;
    Graph g;
    g.N = n;
    g.matrix = (int**)malloc(sizeof(int*) * g.N);
    for (i = 0; i < n; i++) {
        g.matrix[i] = (int*)malloc(sizeof(int) * g.N);
    }
    for (i = 0; i < g.N; i++) {
        for (j = 0; j < g.N; j++) {
            g.matrix[i][j] = max_dis;
        }
    }
    for (i = 0; i < g.N; i++) {
        g.matrix[i][i] = 0;
    }
    g.vertex = (vextype*)malloc(sizeof(vextype) * g.N);
    return g;
}


/**
 * 根据距离d和路径数组path输出路径，这样就不需要路径的节点数也能正确输出路径
 * @param d 路径长度
 * @param diameter_path 储存路径的数组
 * @param g 图
 */
void printPath(int d, int *diameter_path, Graph g)
{
    int k = 0;
    int path_length = 0;
    printf("Path: ");
    do {
        printf("%s->", g.vertex[diameter_path[k]]);
        path_length += g.matrix[diameter_path[k]][diameter_path[k + 1]];
        k++;
    } while (path_length < d);
    printf("%s\n", g.vertex[diameter_path[k]]);
}


/**
 * 判断图是否连通
 * @param g 图
 * @return 连通返回1，否则返回0
 */
int isConnected(Graph g) {
    int* visited = (int*)malloc(sizeof(int) * g.N);
    int i;
    
    // 初始化访问标记数组
    for (i = 0; i < g.N; i++) {
        visited[i] = 0;
    }
    
    // 深度优先搜索从顶点0开始
    int* stack = (int*)malloc(sizeof(int) * g.N);
    int top = -1;
    
    // 将顶点0压入栈
    stack[++top] = 0;
    visited[0] = 1;
    
    while (top >= 0) {
        int current = stack[top--];
        
        // 访问current的所有邻接点
        for (i = 0; i < g.N; i++) {
            if (g.matrix[current][i] != max_dis && g.matrix[current][i] != 0 && !visited[i]) {
                stack[++top] = i;
                visited[i] = 1;
            }
        }
    }
    
    // 检查是否所有顶点都被访问
    for (i = 0; i < g.N; i++) {
        if (!visited[i]) {
            free(visited);
            free(stack);
            return 0; // 存在未访问的顶点，图不连通
        }
    }
    
    free(visited);
    free(stack);
    return 1; // 所有顶点都被访问，图连通
}


/**
 * 计算每个点的度
 * @param g 图
 * @param node_degree 将每个点的度写到这个数组中
 */
void nodeDegree(Graph g, int *node_degree) {
    int i, j;
    
    // 初始化度数组
    for (i = 0; i < g.N; i++) {
        node_degree[i] = 0;
    }
    
    // 计算每个顶点的度
    for (i = 0; i < g.N; i++) {
        for (j = 0; j < g.N; j++) {
            if (g.matrix[i][j] != max_dis && g.matrix[i][j] != 0) {
                node_degree[i]++;
            }
        }
    }
}

/**
 * 计算图的聚类系数
 * @param g 图
 * @return 返回聚类系数
 */
double clusteringCoefficient(Graph g) {
    int i, j, k;
    double coefficient = 0.0;
    int* node_degree = (int*)malloc(sizeof(int) * g.N);
    
    // 计算每个顶点的度
    nodeDegree(g, node_degree);
    
    // 计算每个顶点的聚类系数并求平均
    for (i = 0; i < g.N; i++) {
        // 如果顶点的度小于2，则聚类系数为0
        if (node_degree[i] < 2) {
            continue;
        }
        
        // 计算与顶点i相邻的顶点之间的边数
        int edge_count = 0;
        for (j = 0; j < g.N; j++) {
            if (g.matrix[i][j] != max_dis && g.matrix[i][j] != 0) {
                for (k = j + 1; k < g.N; k++) {
                    if (g.matrix[i][k] != max_dis && g.matrix[i][k] != 0 && 
                        g.matrix[j][k] != max_dis && g.matrix[j][k] != 0) {
                        edge_count++;
                    }
                }
            }
        }
        
        // 可能的最大边数是度数选择2的组合
        int max_edges = node_degree[i] * (node_degree[i] - 1) / 2;
        
        // 如果可能的最大边数为0，则聚类系数为0
        if (max_edges > 0) {
            coefficient += (double)edge_count / max_edges;
        }
    }
    
    free(node_degree);
    
    // 返回平均聚类系数
    return coefficient / g.N;
}


/**
 * 使用dijkstra算法计算单源最短路径
 * @param g 图
 * @param start 起点
 * @param end 终点
 * @param path 从start到end的路径, [start,...,end]
 * @return 路径长度
 */
int dijkstra(Graph g, int start, int end, int *path)
{
    int i, j, k;
    int* dist = (int*)malloc(sizeof(int) * g.N);
    int* visited = (int*)malloc(sizeof(int) * g.N);
    int* prev = (int*)malloc(sizeof(int) * g.N);
    
    // 初始化距离和访问标记
    for (i = 0; i < g.N; i++) {
        dist[i] = g.matrix[start][i];
        visited[i] = 0;
        if (dist[i] != max_dis) {
            prev[i] = start;
        } else {
            prev[i] = -1;
        }
    }
    
    // 将起点标记为已访问
    dist[start] = 0;
    visited[start] = 1;
    prev[start] = -1;
    
    // Dijkstra算法主循环
    for (i = 1; i < g.N; i++) {
        int min_dist = max_dis;
        int u = -1;
        
        // 找到未访问顶点中距离最小的
        for (j = 0; j < g.N; j++) {
            if (!visited[j] && dist[j] < min_dist) {
                min_dist = dist[j];
                u = j;
            }
        }
        
        // 若未找到任何可访问的顶点，则退出循环
        if (u == -1) {
            break;
        }
        
        // 将该顶点标记为已访问
        visited[u] = 1;
        
        // 更新通过u可到达的顶点的距离
        for (j = 0; j < g.N; j++) {
            if (!visited[j] && g.matrix[u][j] != max_dis && 
                dist[u] + g.matrix[u][j] < dist[j]) {
                dist[j] = dist[u] + g.matrix[u][j];
                prev[j] = u;
            }
        }
    }
    
    // 构建从起点到终点的路径
    if (dist[end] == max_dis) {
        free(dist);
        free(visited);
        free(prev);
        return max_dis; // 无法到达终点
    }
    
    // 从终点回溯到起点，构建路径
    int count = 0;
    int* temp_path = (int*)malloc(sizeof(int) * g.N);
    k = end;
    while (k != -1) {
        temp_path[count++] = k;
        k = prev[k];
    }
    
    // 将路径反转为从起点到终点
    for (i = 0; i < count; i++) {
        path[i] = temp_path[count - i - 1];
    }
    
    int result = dist[end];
    
    free(dist);
    free(visited);
    free(prev);
    free(temp_path);
    
    return result;
}


/**
 * 计算图的直径。提示：Floyd算法
 * @param g 图
 * @return 直径的长度
 */
int Diameter(Graph g) {
    int i, j, k;
    
    // 使用Floyd算法计算所有点对之间的最短路径
    int** dist = (int**)malloc(sizeof(int*) * g.N);
    for (i = 0; i < g.N; i++) {
        dist[i] = (int*)malloc(sizeof(int) * g.N);
        for (j = 0; j < g.N; j++) {
            dist[i][j] = g.matrix[i][j];
        }
    }
    
    // Floyd算法主循环
    for (k = 0; k < g.N; k++) {
        for (i = 0; i < g.N; i++) {
            for (j = 0; j < g.N; j++) {
                if (dist[i][k] != max_dis && dist[k][j] != max_dis && 
                    dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
    
    // 找出最大的有限距离，即为图的直径
    int diameter = 0;
    for (i = 0; i < g.N; i++) {
        for (j = 0; j < g.N; j++) {
            if (dist[i][j] != max_dis && dist[i][j] > diameter) {
                diameter = dist[i][j];
            }
        }
    }
    
    // 释放内存
    for (i = 0; i < g.N; i++) {
        free(dist[i]);
    }
    free(dist);
    
    return diameter;
}


/**
 * 计算图的半径
 * @param g 图
 * @return 半径长度
 */
int Radius(Graph g) {
    int i, j, k;
    
    // 使用Floyd算法计算所有点对之间的最短路径
    int** dist = (int**)malloc(sizeof(int*) * g.N);
    for (i = 0; i < g.N; i++) {
        dist[i] = (int*)malloc(sizeof(int) * g.N);
        for (j = 0; j < g.N; j++) {
            dist[i][j] = g.matrix[i][j];
        }
    }
    
    // Floyd算法主循环
    for (k = 0; k < g.N; k++) {
        for (i = 0; i < g.N; i++) {
            for (j = 0; j < g.N; j++) {
                if (dist[i][k] != max_dis && dist[k][j] != max_dis && 
                    dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
    
    // 计算每个顶点的离心率（到其他顶点的最大距离）
    int* eccentricity = (int*)malloc(sizeof(int) * g.N);
    for (i = 0; i < g.N; i++) {
        eccentricity[i] = 0;
        for (j = 0; j < g.N; j++) {
            if (dist[i][j] != max_dis && dist[i][j] > eccentricity[i]) {
                eccentricity[i] = dist[i][j];
            }
        }
    }
    
    // 图的半径是最小的离心率
    int radius = max_dis;
    for (i = 0; i < g.N; i++) {
        if (eccentricity[i] < radius) {
            radius = eccentricity[i];
        }
    }
    
    // 释放内存
    for (i = 0; i < g.N; i++) {
        free(dist[i]);
    }
    free(dist);
    free(eccentricity);
    
    return radius;
}


int main() {
    int node_num;
    int edge_num;

    scanf("%d %d", &node_num, &edge_num);

    Graph g = createGraph(node_num);
    for(int i = 0; i < node_num; i++) {
        sprintf(g.vertex[i], "%d", i);
    }

    for (int i = 0; i < edge_num; i++) {
        int start_idx, end_idx, weight;
        scanf("%d %d %d", &start_idx, &end_idx, &weight);
        g.matrix[start_idx][end_idx] = weight;
        g.matrix[end_idx][start_idx] = weight;
    }
    printf("connected: %d\n", isConnected(g));

    int *degree = (int *)malloc(sizeof(int) * g.N);
    nodeDegree(g, degree);
    printf("degree distribution:\n");
    for(int i=0; i<g.N; i++)
    {
        printf("node%s:%d,", g.vertex[i], degree[i]);
    }
    printf("\n");
    double c = clusteringCoefficient(g);
    printf("clustering coefficient:%f\n", c);

    if (isConnected(g))
    {
        int* short_path = (int*)malloc(sizeof(int) * g.N);
        int dis = dijkstra(g, 1, 3, short_path);
        printf("the minimum fare between 1 and 3: %d\n", dis);
        printPath(dis, short_path, g);
        free(short_path);
        int d = Diameter(g);
        printf("diameter:%d\n", d);

        int r = Radius(g);
        printf("radius:%d\n", r);
    }

    return 0;
}
