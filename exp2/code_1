#include <stdio.h>
#include <stdlib.h>

struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// 辅助函数：根据前序和中序遍历数组构建二叉树
struct TreeNode* buildTreeHelper(int* preorder, int preStart, int preEnd, 
                                int* inorder, int inStart, int inEnd) {
    if (preStart > preEnd) {
        return NULL;
    }
    
    // 前序遍历的第一个节点是根节点
    int rootVal = preorder[preStart];
    struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    root->val = rootVal;
    
    // 在中序遍历中找到根节点的位置
    int rootIndex = inStart;
    while (rootIndex <= inEnd && inorder[rootIndex] != rootVal) {
        rootIndex++;
    }
    
    // 计算左子树的节点数量
    int leftSize = rootIndex - inStart;
    
    // 递归构建左右子树
    root->left = buildTreeHelper(preorder, preStart + 1, preStart + leftSize, 
                                inorder, inStart, rootIndex - 1);
    root->right = buildTreeHelper(preorder, preStart + leftSize + 1, preEnd, 
                                 inorder, rootIndex + 1, inEnd);
    
    return root;
}

struct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize) {
    return buildTreeHelper(preorder, 0, preorderSize - 1, inorder, 0, inorderSize - 1);
}

// 定义一个简单的队列结构
typedef struct {
    struct TreeNode** array;
    int front;
    int rear;
    int capacity;
} Queue;

Queue* createQueue(int capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = queue->rear = -1;
    queue->array = (struct TreeNode**)malloc(capacity * sizeof(struct TreeNode*));
    return queue;
}

int isEmpty(Queue* queue) {
    return queue->front == -1;
}

void enqueue(Queue* queue, struct TreeNode* item) {
    if (queue->rear == queue->capacity - 1) {
        return; // 队列已满
    }
    
    if (queue->front == -1) {
        queue->front = 0;
    }
    
    queue->rear++;
    queue->array[queue->rear] = item;
}

struct TreeNode* dequeue(Queue* queue) {
    if (isEmpty(queue)) {
        return NULL;
    }
    
    struct TreeNode* item = queue->array[queue->front];
    
    if (queue->front == queue->rear) {
        queue->front = queue->rear = -1;
    } else {
        queue->front++;
    }
    
    return item;
}

void printTree(struct TreeNode* root) {
    if (root == NULL) {
        printf("null ");
        return;
    }
    
    Queue* queue = createQueue(1000);
    enqueue(queue, root);
    
    int nullCount = 0;
    int shouldPrint = 1; // 用于判断是否继续打印
    
    printf("%d ", root->val);
    
    while (!isEmpty(queue)) {
        struct TreeNode* node = dequeue(queue);
        
        if (node->left != NULL) {
            enqueue(queue, node->left);
            printf("%d ", node->left->val);
            nullCount = 0;
        } else {
            printf("null ");
            nullCount++;
        }
        
        if (node->right != NULL) {
            enqueue(queue, node->right);
            printf("%d ", node->right->val);
            nullCount = 0;
        } else {
            printf("null ");
            nullCount++;
        }
    }
    
    free(queue->array);
    free(queue);
}

int main() {
    int preorderSize;
    scanf("%d", &preorderSize);
    int* preorder = (int*)malloc(preorderSize * sizeof(int));
    for (int i = 0; i < preorderSize; i++) {
        scanf("%d", &preorder[i]);
    }
    
    int inorderSize = preorderSize;
    int* inorder = (int*)malloc(inorderSize * sizeof(int));
    for (int i = 0; i < inorderSize; i++) {
        scanf("%d", &inorder[i]);
    }
    
    struct TreeNode* root = buildTree(preorder, preorderSize, inorder, inorderSize);
    printTree(root);
    
    return 0;
}
