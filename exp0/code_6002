#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 1000

int evalRPN(char **tokens, int n) 
{
    int stack[MAX_SIZE];
    int top = -1;

    for (int i = 0; i < n; i++) 
    {
        char *token = tokens[i];
        
        if (strcmp(token, "+") == 0 || strcmp(token, "-") == 0 || 
            strcmp(token, "*") == 0 || strcmp(token, "/") == 0) 
        {
            if (top < 1) 
            {
                printf("Invalid Expression\n");
                return 0;
            }

            int b = stack[top--];
            int a = stack[top--];
            int result = 0;
            
            if (strcmp(token, "+") == 0) 
            {
                result = a + b;
            } 

            else if (strcmp(token, "-") == 0) 
            {
                result = a - b;
            }

             else if (strcmp(token, "*") == 0) 
            {
                result = a * b;
            } 
            
            else if (strcmp(token, "/") == 0) 
            {
                if (b == 0) 
                {
                    printf("Division by zero error\n");
                    return 0;
                }
                result = a / b;
            }
            stack[++top] = result;
        } 
        
        else 
        {
            stack[++top] = atoi(token);
        }
    }

    if (top != 0) 
    {
        printf("Invalid Expression\n");
        return 0;
    }

    return stack[top];
}

int main() 
{
    int n;
    scanf("%d", &n);

    char *tokens[MAX_SIZE];
    for (int i = 0; i < n; i++) 
    {
        tokens[i] = (char *)malloc(MAX_SIZE * sizeof(char));
        scanf("%s", tokens[i]);
    }

    int result = evalRPN(tokens, n);
    printf("%d\n", result);

    for (int i = 0; i < n; i++) 
    {
        free(tokens[i]);
    }

    return 0;
}
